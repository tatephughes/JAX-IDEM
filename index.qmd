---
title: "Integro-Difference Equation Models in JAX"
author: "Evan Tate Paterson Hughes"
format:
  html:
    code-fold: true
    toc: true
    code-link: true
    mathjax: 
      extensions: ["breqn", "bm", "ams"]
    code-links:
      - text: Github
        icon: file-code
        repo: https://github.com/tatephughes/JAX-IDEM
        href: https://github.com/tatephughes/JAX-IDEM
jupyter: python3
bibliography: site/Bibliography.bib
---

```{python}
#| output: false
import sys
import os
sys.path.append(os.path.abspath('src/jax_idem'))

import jax
import importlib
import utilities
import IDEM

importlib.reload(utilities)
importlib.reload(IDEM)

from utilities import *
from IDEM import *
import warnings

import matplotlib.pyplot as plt

seed = 4
key = jax.random.PRNGKey(seed)
keys = rand.split(key, 2)

model = gen_example_idem(keys[0], k_spat_inv=False, ngrid=jnp.array([40, 40]))

# Simulation
T = 35
process_data, obs_data = model.simulate(key, T=T, nobs=50)

dpi = 80
width = 576 / dpi
height = 480 / dpi

plt.rcParams['figure.facecolor'] = '#222222'
plt.rcParams['axes.facecolor'] = 'whitesmoke'

# plot the objects
gif_st_grid(process_data, "site/process.gif", width=width, height=height)
gif_st_pts(obs_data, "site/obs.gif", width=width, height=height)
model.kernel.save_fig("site/kernel.png", width=width, height=height)

from PIL import Image, ImageSequence

gif1 = Image.open('site/process.gif')
gif2 = Image.open('site/tardis.gif')

width, height = gif1.size

frames = []
num_frames_gif1 = len(list(ImageSequence.Iterator(gif1)))
num_frames_gif2 = len(list(ImageSequence.Iterator(gif2)))
max_frames = max(num_frames_gif1, num_frames_gif2)

for i in range(max_frames):
    frame1 = ImageSequence.Iterator(gif1)[i % num_frames_gif1].convert("RGBA")
    frame2 = ImageSequence.Iterator(gif2)[i % num_frames_gif2].convert("RGBA")

    frame2 = frame2.resize((width, height), Image.LANCZOS)
    
    combined = Image.alpha_composite(frame1, frame2)
    frames.append(combined)


frames[0].save('site/process.gif', save_all=True, append_images=frames[1:], duration=gif1.info['duration'], loop=0)

```


::: {#fig-example layout-ncol=3}

![Process](site/process.gif)

![Observations](site/obs.gif)

![Kernel](site/kernel.png)

An example IDEM simulation, with the underlying process (left), noisy observations randomly placed at each time interval (center), and the direction of 'flow' dictated by the kernel (right).

:::

## The Technicalities

For a rundown of the mathematics underpinning this model and implementation, see [here](site/mathematics.html).

## Documentation

Documentation for the package is available [here](reference/index.html)

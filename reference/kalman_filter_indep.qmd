# kalman_filter_indep { #jaxidem.filter_smoother_functions.kalman_filter_indep }

```python
filter_smoother_functions.kalman_filter_indep(
    m_0,
    P_0,
    M,
    PHI,
    sigma2_eta,
    sigma2_eps,
    zs,
    likelihood='partial',
)
```

Applies the Kalman Filter to a wide-format matrix of data.
Additionally assumes that both the error terms $$\boldsymbol \epsilon_t$$ and the noise terms $$\boldsymbol \eta_t$$ both have uncorrelated componants.
For jit-ability, this only allows full (no missing) data in a wide format.
For changing data locations or changing data dimension, see [`information_filter_inder`](/reference/information_filter_indep.qmd).
For the Kalman filter with correlated errors, see [`kalman_filter`](/reference/kalman_filter.qmd).
For the square-root Kalman filter, [`sqrt_filter_indep`](/reference/sqrt_filter_indep.qmd).

Computes posterior means and variances for a system
$$\begin{split}
    \mathbf Z_t &= \Phi \boldsymbol\alpha_t + \boldsymbol \epsilon_t, \quad t = 1,\dots, T,\\
    \boldsymbol \alpha_{t+1} &= M\boldsymbol \alpha_t + \boldsymbol\eta_t,\quad t = 0,2,\dots, T-1,\\
\end{split}
$$
with initial 'priors'
$$\begin{split}
    \boldsymbol \alpha_{0} \sim \mathcal N(\mathbf m_0, \mathbf P_0),\\
\end{split}
$$
where
$$\begin{split}
    \boldsymbol \epsilon_t \overset{\mathrm{iid}}{\sim} \mathcal N(0, \sigma^2_\epsilon I),
    \boldsymbol \eta_t \overset{\mathrm{iid}}{\sim} \mathcal N(0, \sigma^2_\eta I).
\end{split}
$$

## Parameters {.doc-section .doc-section-parameters}

| Name       | Type      | Description                                                                                                            | Default     |
|------------|-----------|------------------------------------------------------------------------------------------------------------------------|-------------|
| m_0        | ArrayLike | The initial means of the process vector                                                                                | _required_  |
| P_0        | ArrayLike | The initial Covariance matrix of the process vector                                                                    | _required_  |
| M          | ArrayLike | The transition matrix of the process                                                                                   | _required_  |
| PHI        | ArrayLike | The process-to-data matrix                                                                                             | _required_  |
| sigma2_eta | float     | The variance of the process noise                                                                                      | _required_  |
| sigma2_eps | float     | The variance  of the observation noise                                                                                 | _required_  |
| zs         | ArrayLike | The observed data to be filtered, in matrix format                                                                     | _required_  |
| likelihood | str       | (STATIC) The mode to compute the likelihood ('full' with constant terms, 'partial' without constant terms, or 'none'.) | `'partial'` |

## Returns {.doc-section .doc-section-returns}

| Name   | Type                   | Description                                                                              |
|--------|------------------------|------------------------------------------------------------------------------------------|
| ll     | ArrayLike(1)           | The log (data) likelihood of the data                                                    |
| ms     | ArrayLike(T, r)        | The posterior means $m_{t \mid t}$ of the process given the data 1:t                     |
| Ps     | ArrayLike(T, r, r)     | The posterior covariance matrices $P_{t \mid t}$ of the process given the data 1:t       |
| mpreds | ArrayLike(T - 1, r)    | The predicted next-step means $m_{t \mid t-1}$ of the process given the data 1:t-1       |
| Ppreds | ArrayLike(T - 1, r, r) | The predicted next-step covariances $P_{t \mid t-1}$ of the process given the data 1:t-1 |
| Ks     | ArrayLike(T, n, r)     | The Kalman Gains at each time step                                                       |
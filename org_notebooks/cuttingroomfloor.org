
#+begin_src python :session example :results none
vecpsi = vmap(psi_i, (1, None))


def integrate_2d(f, x_bounds, y_bounds, num_points=100):
    x = jnp.linspace(x_bounds[0], x_bounds[1], num_points)
    y = jnp.linspace(y_bounds[0], y_bounds[1], num_points)
    X, Y = jnp.meshgrid(x, y)
    Z = f(X, Y)
    integral = trapezoid(trapezoid(Z, x), y)
    return integral

def f2(s1, s2, i, j): return psi_i(jnp.array([s1,s2]), i)* psi_i(jnp.array([s1,s2]), j)

f2vec = vmap(f2, in_axes=(0, 0, None, None))
#f2vec = vmap(vmap(f2, in_axes=(0, None, None, None)), in_axes=(None, 0, None, None))

integrate_ij = lambda i,j: integrate_2d(lambda s1, s2: f2vec(s1,s2, i, j), (0,1), (0,1))

i_values = jnp.arange(0, 100)
j_values = jnp.arange(0, 100)

# this is finally a way to do these kinds of matrix integrations in an easy way!
vectorized_integrate_ij = vmap(vmap(integrate_ij, in_axes=(0, None)), in_axes=(None, 0))
PSIZ = vectorized_integrate_ij(i_values, j_values)

def PHI2(s):
    
    def f1(r1,r2,i,j): return psi_i(s-jnp.array([r1,r2]), i) * psi_i(jnp.array([r1,r2]), j)
    f1vec = vmap(vmap(f1, in_axes=(0, None, None, None)), in_axes=(None, 0, None, None))

    integrate_ij = lambda i,j: integrate_2d(lambda r1, r2: f1vec(r1,r2, i, j), (0,1), (0,1))
    
    i_values = jnp.arange(0, 100)
    j_values = jnp.arange(0, 100)
    
    # this is finally a way to do these kinds of matrix integrations in an easy way!
    vectorized_integrate_ij = vmap(vmap(integrate_ij, in_axes=(0, None)), in_axes=(None, 0))
    PSIS = vectorized_integrate_ij(i_values, j_values)

    return PSIS
#+end_src



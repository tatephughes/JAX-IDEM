{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Integro-Difference Equation Models in JAX\"\n",
        "author: \"Evan Tate Paterson Hughes\"\n",
        "format:\n",
        "  html:\n",
        "    code-fold: true\n",
        "    toc: true\n",
        "    code-link: true\n",
        "    mathjax: \n",
        "      extensions: [\"breqn\", \"bm\", \"ams\"]\n",
        "    code-links:\n",
        "      - text: Github\n",
        "        icon: file-code\n",
        "        repo: https://github.com/tatephughes/JAX-IDEM\n",
        "        href: https://github.com/tatephughes/JAX-IDEM\n",
        "jupyter: python3\n",
        "bibliography: site/Bibliography.bib\n",
        "---"
      ],
      "id": "cd84e38f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: false\n",
        "import jax\n",
        "import jax.numpy as jnp\n",
        "import jaxidem.utils as utils\n",
        "import jaxidem.idem as idem\n",
        "import matplotlib.pyplot as plt\n",
        "from PIL import Image, ImageSequence\n",
        "\n",
        "seed = 4\n",
        "key = jax.random.PRNGKey(seed)\n",
        "keys = jax.random.split(key, 10)\n",
        "\n",
        "process_basis = utils.place_cosine_basis(N = 30)\n",
        "\n",
        "#Sigma_eta = jnp.diag(0.1*jnp.arange(process_basis.nbasis, dtype=\"float32\"))\n",
        "#Sigma_eta = jnp.diag(rand.normal(key, shape=(process_basis.nbasis,))**2)\n",
        "sigma2_eta = jnp.diag((0.01*jnp.ones(process_basis.nbasis)).at[1].set(40.0).at[30].set(80.0).at[31].set(60.0))\n",
        "\n",
        "model = idem.gen_example_idem(keys[0], k_spat_inv=False, ngrid=jnp.array([40, 40]), process_basis = process_basis, sigma2_eta = sigma2_eta)\n",
        "\n",
        "# Simulation\n",
        "T = 35\n",
        "alpha_0 = jnp.ones(process_basis.nbasis)#.at[1].set(30.0).at[0].set(15.0)\n",
        "process_data, obs_data = model.simulate(keys[1], T=T, nobs=50,alpha_0=alpha_0)\n",
        "\n",
        "dpi = 200\n",
        "width = 576 / dpi\n",
        "height = 480 / dpi\n",
        "\n",
        "# plot the objects\n",
        "utils.gif_st_grid(process_data, \"site/figure/process.gif\", width=width, height=height)\n",
        "utils.gif_st_pts(obs_data, \"site/figure/obs.gif\", width=width, height=height)\n",
        "model.kernel.save_plot(\"site/figure/kernel.png\", width=width, height=height)\n",
        " \n",
        "gif1 = Image.open('site/figure/process.gif')\n",
        "gif2 = Image.open('site/figure/tardis.gif')\n",
        "\n",
        "width, height = gif1.size\n",
        "\n",
        "frames = []\n",
        "num_frames_gif1 = len(list(ImageSequence.Iterator(gif1)))\n",
        "num_frames_gif2 = len(list(ImageSequence.Iterator(gif2)))\n",
        "max_frames = max(num_frames_gif1, num_frames_gif2)\n",
        "\n",
        "for i in range(max_frames):\n",
        "    frame1 = ImageSequence.Iterator(gif1)[i % num_frames_gif1].convert(\"RGBA\")\n",
        "    frame2 = ImageSequence.Iterator(gif2)[i % num_frames_gif2].convert(\"RGBA\")\n",
        "\n",
        "    frame2 = frame2.resize((width, height), Image.LANCZOS)\n",
        "    \n",
        "    combined = Image.alpha_composite(frame1, frame2)\n",
        "    frames.append(combined)\n",
        "\n",
        "\n",
        "frames[0].save('site/figure/process.gif', save_all=True, append_images=frames[1:], duration=gif1.info['duration'], loop=0)"
      ],
      "id": "436e2051",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {#fig-example layout-ncol=3}\n",
        "\n",
        "![Process](site/figure/process.gif)\n",
        "\n",
        "![Observations](site/figure/obs.gif)\n",
        "\n",
        "![Kernel](site/figure/kernel.png)\n",
        "\n",
        "An example IDEM simulation, with the underlying process (left), noisy observations randomly placed at each time interval (center), and the direction of 'flow' dictated by the kernel (right).\n",
        "\n",
        ":::\n",
        "\n",
        "## The Technicalities\n",
        "\n",
        "For a rundown of the mathematics underpinning this model and implementation, see [here](site/mathematics.html).\n",
        "\n",
        "## Documentation\n",
        "\n",
        "Documentation for the package is available [here](reference/index.html).\n",
        "\n",
        "## Other sections\n",
        "\n",
        "[IDEM fit example](site/fit_example.html)\n",
        "\n",
        "[Filtering example](site/filtering_and_smoothing.html)\n",
        "\n",
        "[Sydney Radar example](site/Sydney_Radar.html)\n"
      ],
      "id": "7a51a3af"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/home/tate/Projects/JAX-IDEM/.venv/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
---
title: "Sydney Radar Data"
author: "Evan Tate Paterson Hughes"
format:
  html:
    code-fold: true
    toc: true
    inclue-in-header: header.html
    mathjax: 
      extensions: ["breqn", "bm", "ams"]
jupyter: python3
bibliography: Bibliography.bib
---



```{python}
import jax

import os
os.environ["JAX_PLATFORMS"] = "cpu"

import jax.numpy as jnp
import jax.random as rand
import pandas as pd

import jaxidem.idem as idem
import jaxidem.utils as utils



```
 
```{python}
import matplotlib.pyplot as plt
import numpy as np

# Load the CSV file using NumPy
csv_data = np.loadtxt('data/Chains/HMC_chain_32.csv', delimiter=',')
# Convert the NumPy array to a JAX array
hmc_sample_32 = jnp.array(csv_data)[10000:60000,1:]

print(f"Acceptance Ratio: {jnp.mean(csv_data[:,0])}")
post_mean = jnp.mean(hmc_sample_32, axis=0)
post_var = jnp.var(hmc_sample_32, axis=0)
print(f"Posterior Mean of (transformed) parameters: \n{post_mean}")
print(f"Posterior Variance of (transformed) parameters: \n{post_var}")

samples = hmc_sample_32

# Number of parameters (columns in the array)
num_params = samples.shape[1]

# Create a figure and axes for the stacked trace plots
fig, axes = plt.subplots(num_params, 1, figsize=(10, 2 * num_params), sharex=True)

# Plot each parameter's trace
for i in range(num_params):
    axes[i].plot(samples[:, i], lw=0.8, color='b')
    axes[i].set_ylabel(f'Parameter {i+1}')
    axes[i].grid(True)

# Label the x-axis for the last subplot
axes[-1].set_xlabel('Iteration')

# Add a title to the entire figure
fig.suptitle('Trace Plots', fontsize=16, y=0.95)

# Adjust spacing
plt.tight_layout(rect=[0, 0, 1, 0.96]) 
plt.show()
```


```{python}
import matplotlib.pyplot as plt
import numpy as np

# Load the CSV file using NumPy
csv_data = np.loadtxt('data/Chains/HMC_chain_64.csv', delimiter=',')
# Convert the NumPy array to a JAX array
hmc_sample_64 = jnp.array(csv_data)[10000:60000,1:]

print(f"Acceptance Ratio: {jnp.mean(csv_data[:,0])}")
post_mean = jnp.mean(hmc_sample_64, axis=0)
post_var = jnp.var(hmc_sample_64, axis=0)
print(f"Posterior Mean of (transformed) parameters: \n{post_mean}")
print(f"Posterior Variance of (transformed) parameters: \n{post_var}")

samples = hmc_sample_64

# Number of parameters (columns in the array)
num_params = samples.shape[1]

# Create a figure and axes for the stacked trace plots
fig, axes = plt.subplots(num_params, 1, figsize=(10, 2 * num_params), sharex=True)

# Plot each parameter's trace
for i in range(num_params):
    axes[i].plot(samples[:, i], lw=0.8, color='b')
    axes[i].set_ylabel(f'Parameter {i+1}')
    axes[i].grid(True)

# Label the x-axis for the last subplot
axes[-1].set_xlabel('Iteration')

# Add a title to the entire figure
fig.suptitle('Trace Plots', fontsize=16, y=0.95)

# Adjust spacing
plt.tight_layout(rect=[0, 0, 1, 0.96]) 
plt.show()
```



# RMH chain 64

```{python}
import matplotlib.pyplot as plt
import numpy as np

# Load the CSV file using NumPy
csv_data = np.loadtxt('data/Chains/RMHchainA.csv', delimiter=',')
# Convert the NumPy array to a JAX array
hmc_sample_64 = jnp.array(csv_data)[:,1:]

print(f"Acceptance Ratio: {jnp.mean(csv_data[:,0])}")
post_mean = jnp.mean(hmc_sample_64, axis=0)
post_var = jnp.var(hmc_sample_64, axis=0)
print(f"Posterior Mean of (transformed) parameters: \n{post_mean}")
print(f"Posterior Variance of (transformed) parameters: \n{post_var}")

samples = hmc_sample_64

# Number of parameters (columns in the array)
num_params = samples.shape[1]

# Create a figure and axes for the stacked trace plots
fig, axes = plt.subplots(num_params, 1, figsize=(10, 2 * num_params), sharex=True)

# Plot each parameter's trace
for i in range(num_params):
    axes[i].plot(samples[:, i], lw=0.8, color='b')
    axes[i].set_ylabel(f'Parameter {i+1}')
    axes[i].grid(True)

# Label the x-axis for the last subplot
axes[-1].set_xlabel('Iteration')

# Add a title to the entire figure
fig.suptitle('Trace Plots', fontsize=16, y=0.95)

# Adjust spacing
plt.tight_layout(rect=[0, 0, 1, 0.96]) 
plt.show()
```

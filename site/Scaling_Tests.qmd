---
title: "Scaling Comparisons for the filtering algorithms"
author: "Evan Tate Paterson Hughes"
format:
  html:
    code-fold: true
    toc: true
    include-in-header: header.html
    mathjax: 
      extensions: ["breqn", "bm", "ams"]
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
    keep-tex: true
    include-in-header: header.tex
    documentclass: report
    geometry:
      - left=20.0mm
      - right=20.0mm
      - marginparsep=7.7mm
      - marginparwidth=70.3mm
      - top=20mm
    fig-pos: 'h'
jupyter: python3
bibliography: Bibliography.bib
---


Currently, the Kalman filter, the Information filter, the Square-root filter, and the square-root-information filter are all implemented.

We will use a simulated data set, from cosine basis functions over 100 frequencies and invariant kernel.
See figure (?) for the 6 time points of the simulated process.

We then filter this data, and time the implemented filters to compute the marginal log likelihood.
We run the alogrithms with a sequence of model parameters that are close to the ones used to simulate the data, with added noise to avoid the memoisation the JAX uses.

We simulate $n=300$ observations per time point in total, and redact observations in order to show the compute times for each $n$ between 50 and 300.
These are computed in 64 bit for stability, and the results are in figure (?)

Additionally, to demonstrate the square root filters stability, we also fix $n$ and progressively increase $n$.
The data is simulated from a high-dimensional process basis, and then filtered using models with a lower $r$, increasing in square between $5^2$ and $15^2$.
The results are shown in figure (?).

# Laptop RTX 4060 (Lovelace)

```{python}
import pandas as pd
import plotly.express as px

# Load the datasets
df64 = pd.read_csv('data/varying_n_laptop_64.csv')
df32 = pd.read_csv('data/varying_n_laptop_32.csv')

# Select and melt relevant columns from df64
df64_melted = df64.melt(
    id_vars="n", 
    value_vars=df64.columns[3:7],
    var_name="Filter",
    value_name="Time"
)
df64_melted["Precision"] = "64-bit"

# Select and melt the two columns from df32
df32_melted = df32.melt(
    id_vars="n",
    value_vars=[df32.columns[4], df32.columns[6]],
    var_name="Filter",
    value_name="Time"
)
df32_melted["Precision"] = "32-bit"

# Combine both
df_combined = pd.concat([df64_melted, df32_melted], ignore_index=True)

rename_map = {
    "kalman_run": "Kalman",
    "sqrt_run": "Square-root",
    "inf_run": "Information",
    "sqinf_run": "Sqrt Information",
}

# Apply renaming
df_combined["Filter"] = df_combined["Filter"].replace(rename_map)


# Plot using Plotly Express
fig = px.line(
    df_combined,
    x="n",
    y="Time",
    color="Filter",
    line_dash="Precision",
    labels={"n": "number of observations", "Time": "Time (seconds)"},
    title="Filters Comparison with Varying n"
)

fig.write_image("figure/scale_test_n_laptop.png")
fig.show()
```


# NCC (Ampere)

```{python}
import pandas as pd
import plotly.express as px

# Load the datasets
df64 = pd.read_csv('data/varying_n_ncc_64.csv')
df32 = pd.read_csv('data/varying_n_ncc_32.csv')

# Select and melt relevant columns from df64
df64_melted = df64.melt(
    id_vars="n",
    value_vars=df64.columns[3:7],
    var_name="Filter",
    value_name="Time"
)
df64_melted["Precision"] = "64-bit"

# Select and melt the two columns from df32
df32_melted = df32.melt(
    id_vars="n",
    value_vars=[df32.columns[4], df32.columns[6]],
    var_name="Filter",
    value_name="Time"
)
df32_melted["Precision"] = "32-bit"

# Combine both
df_combined = pd.concat([df64_melted, df32_melted], ignore_index=True)

rename_map = {
    "kalman_run": "Kalman",
    "sqrt_run": "Square-root",
    "inf_run": "Information",
    "sqinf_run": "Sqrt Information",
}

# Apply renaming
df_combined["Filter"] = df_combined["Filter"].replace(rename_map)


# Plot using Plotly Express
fig = px.line(
    df_combined,
    x="n",
    y="Time",
    color="Filter",
    line_dash="Precision",
    labels={"n": "number of observations", "Time": "Time (seconds)"},
    title="Filters Comparison with Varying n"
)

fig.write_image("figure/scale_test_n_ampere.png")
fig.show()
```



# NCC (Turing)

```{python}
import pandas as pd
import plotly.express as px

# Load the datasets
df64 = pd.read_csv('data/varying_n_turing_64.csv')
df32 = pd.read_csv('data/varying_n_turing_32.csv')

# Select and melt relevant columns from df64
df64_melted = df64.melt(
    id_vars="n",
    value_vars=df64.columns[3:7],
    var_name="Filter",
    value_name="Time"
)
df64_melted["Precision"] = "64-bit"

# Select and melt the two columns from df32
df32_melted = df32.melt(
    id_vars="n",
    value_vars=[df32.columns[4], df32.columns[6]],
    var_name="Filter",
    value_name="Time"
)
df32_melted["Precision"] = "32-bit"

# Combine both
df_combined = pd.concat([df64_melted, df32_melted], ignore_index=True)

rename_map = {
    "kalman_run": "Kalman",
    "sqrt_run": "Square-root",
    "inf_run": "Information",
    "sqinf_run": "Sqrt Information",
}

# Apply renaming
df_combined["Filter"] = df_combined["Filter"].replace(rename_map)


# Plot using Plotly Express
fig = px.line(
    df_combined,
    x="n",
    y="Time",
    color="Filter",
    line_dash="Precision",
    labels={"n": "number of observations", "Time": "Time (seconds)"},
    title="Filters Comparison with Varying n"
)

fig.write_image("figure/scale_test_n_turing.png")
fig.show()
```
